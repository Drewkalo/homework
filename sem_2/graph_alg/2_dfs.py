#Реализация dfs
#список посещённых вершин 
visited = []

#Вкратце, записываем вершинку, в которой находимся в посещённые, после запускаем алгоритм от соседей, если они не были посещены. 
#Повторяем до конца
def dfs(G,visited,start):
    visited.append(start)
    for i in G[start]:
        if i not in visited:
            dfs(G,visited,i)

#пример
G = {0:{1,2},1:{0,2,3},2:{0,1,4,5},3:{1,4},4:{2,3,5},5:{2,4,6},6:{5}}
dfs(G,visited,3)
print(visited)

#Подсчет компонент связности
#запускаем dfs от вершины, это будет первая компонента связности. Этот запус dfs идет только по циклу, если он есть. 
#В visited записываются все составляющие цикла. После запускаем dfs от вершин, не находящихся в visited.
# Каждый запуск от повышаем число компонент связности.
visited = []

N = 0
for i in G:
    if i not in visited:
        N += 1
        dfs(G,visited,i)
print(N)
